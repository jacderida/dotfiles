#!/usr/bin/env python
import csv
import re
import sys

class Release(object):
    def __init__(self, catno, artist, title, year, fmt):
        self.catno = catno
        self.artist = self._remove_number_from_duplicate_entry(artist)
        self.title = title
        self.year = "Unknown" if "null" in year else year
        self.fmt = self._get_format(fmt)
        self.digital = True if "File" in fmt else False

    def __repr__(self):
        return '"{0}", "{1}", "{2}", "{3}", "{4}", "{5}"'.format(self.catno, self.artist, self.title, self.year, self.fmt, self.digital)

    def __eq__(self, other):
        return (isinstance(other, self.__class__)
                and self.artist.lower() == other.artist.lower()
                and self.title.lower() == other.title.lower())

    def _get_format(self, fmt):
        if 'Comp' in fmt:
            return 'Compilation'
        if 'Album' in fmt:
            return 'Album'
        if "7'" in fmt:
            return '7inch'
        if "10'" in fmt:
            return '10inch'
        if "12'" in fmt:
            return '12inch'
        if 'LP' in fmt:
            return 'Album'
        if 'EP' in fmt:
            return 'EP'
        return fmt

    def _remove_number_from_duplicate_entry(self, entry):
        match = re.search('.*(\(\d+\))', entry)
        if match:
            entry = entry[0:match.start(1)].strip()
        return entry

def main():
    sorted_releases = get_list_sorted_by_year()
    filtered_releases = []
    for release in sorted_releases:
        if release not in filtered_releases:
            filtered_releases.append(release)
    for release in filtered_releases:
        print release

def get_list_sorted_by_year():
    releases = []
    reader = csv.reader(sys.stdin, skipinitialspace=True)
    for row in reader:
        release = Release(
            row[0].strip(),
            row[1].strip(),
            row[2].strip(),
            row[3].strip(),
            row[4].strip())
        releases.append(release)
    releases.sort(key=lambda x: (x.year, x.digital))
    return releases

if __name__ == '__main__':
    sys.exit(main())
